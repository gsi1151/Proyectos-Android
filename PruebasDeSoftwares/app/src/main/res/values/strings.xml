<resources>
    <string name="app_name">Pruebas de Software</string>

    <!-- SignUp activity -->
    <string name="signup_label">Last.fm: Sign Up</string>
    <string name="signup_create_account">Create Account</string>
    <string name="edt_usuario">Usuario</string>
    <string name="signup_password">Crontraseña</string>
    <string name="signup_email">Tu Correro</string>
    <string name="signup_saving">Crar una cuenta</string>

    <!-- LastFm main activity -->
    <string name="main_username">Usuario</string>
    <string name="main_password">Contraseña</string>
    <string name="main_login">Entrar</string>
    <string name="main_signup">Regístrate</string>
    <string name="main_newaccount">&quot;¿Aún no tienes una cuenta todavía?&quot;</string>
    <string name="main_authenticating">Autenticación</string>
    <string name="main_forgotpassword">Olvidé mi contraseña</string>

    <!--botones -->

    <string name="btn_menu">Menu</string>
    <string name="btn_regresar">Regresar</string>
    <string name="btn_guardar">Guardar</string>
    <string name="login_valido">luis</string>
    <string name="clave_valida">123</string>
    <string name="error_autenticar">LOGIN O PASS INCORRECTOS</string>

    <!-- pag bienvenido_layout-->
    <string name="Introduccion">En un proyecto de desarrollo de software los errores \n
        (bugs en inglés) puede presentarse en cualquiera de las etapas del ciclo de vida
        del software Aún cuando se intente detectarlos despúes de cada fase utilizando
        técnicas como la inspección, algunos errores permanecen sin ser descubiertos </string>
    <string name="intro">Esta aplicacion te ayudara aprender los diferentes tipos de pruebas de software.\n</string>
    <string name="bienvenido">Bienvenido a Pruebas de software </string>

    <!--Menu-->
    <string name="drawer_opened">Opened</string>
    <string name="drawer_closed">Closed</string>
    <string name="remitente">tema</string>
    <string name="asunto">subtema</string>
    <string name="bibliografia">Bibliografía: \n PruebasSoftware.pdf \n http://ing-sw.blogspot.mx/2005/04/tipos-de-pruebas-de-software.html \n https://github.com/</string>
    <string name="version">Versión: \n 1.0</string>
    <string name="empresa">Empresa: \n Universidad Tecnologica Del Norte de Guanajuato</string>
    <string name="desarrollador">Desarrollador: \n Luis Alberto Grimaldo Robles</string>
    <string name="materia">Materia: \n Desarrollo de Aplicaciones III</string>
    <string name="temas">Temas</string>
    <string name="menu1">Grafica de Quizes</string>
    <string name="menu2">Configuracion</string>
    <string name="menu3">Avances del Curso</string>
    <string name="menu4">Enviar a correo</string>
    <string name="menu5">Pruebas de Codigo</string>
    <string name="menu_settings">Settings</string>

    <string name="str_next">Next</string>
    <string name="title_activity_result">Results!!!</string>
    <string name="rock">Rock</string>
    <string name="electronica">Electronica</string>
    <string name="intente">Intente otra vez</string>
    <string name="contrasenia_invalida">Contrasenia Invalida</string>
    <string name="contrasenia_sin_conincidir">Las Contrasenias No Coinciden</string>
    <string name="datos_guardados">Datos Guardados</string>
    <string name="temaI">"I.- Pruebas Unitarias"</string>
    <string name="temaII">"II.- Pruebas de Aceptación de Usuario"</string>
    <string name="temaIII">"III.- Pruebas de Regreción"</string>
    <string name="temaIV">"IV.- Pruebas Funcionales"</string>
    <string name="temaV">"V.- Pruebas de Integración"</string>
    <string name="temaVI">"VI.- Pruebas de Calidad de Código"</string>


    <string name="save_result">Guardar Resultado</string>
    <string name="ResultadoQuiz">Resultado de tus quizes:</string>
    <string name="title_activity_settings">Settings</string>

    <!-- Strings related to Settings -->

    <!-- Example General settings -->
    <string name="pref_header_general">General</string>

    <string name="pref_title_social_recommendations">Habilitar recomendaciones sociales</string>
    <string name="pref_description_social_recommendations">Recomendaciones para las personas en contacto basado en el historial de mensajes
    </string>

    <string name="pref_title_display_name">Mostrar nombre</string>
    <string name="pref_default_display_name">Luis Alberto Grimaldo</string>

    <string name="pref_title_add_friends_to_messages">Añadir amigos a los mensajes</string>
    <string-array name="pref_example_list_titles">
        <item>Siempre</item>
        <item>Cuando sea posible</item>
        <item>Nunca</item>
    </string-array>
    <string-array name="pref_example_list_values">
        <item>1</item>
        <item>0</item>
        <item>-1</item>
    </string-array>

    <!-- Example settings for Data & Sync -->
    <string name="pref_header_data_sync">Datos &amp; Sincronizacion</string>

    <string name="pref_title_sync_frequency">Frecuencia de sincronización</string>
    <string-array name="pref_sync_frequency_titles">
        <item>15 minutos</item>
        <item>30 minutos</item>
        <item>1 hora</item>
        <item>3 horas</item>
        <item>6 horas</item>
        <item>Nunca</item>
    </string-array>
    <string-array name="pref_sync_frequency_values">
        <item>15</item>
        <item>30</item>
        <item>60</item>
        <item>180</item>
        <item>360</item>
        <item>-1</item>
    </string-array>

            <string name="pref_title_system_sync_settings">
Configuración de sincronización del sistema</string>

    <!-- Example settings for Notifications -->
    <string name="pref_header_notifications">Notificaciones</string>

    <string name="pref_title_new_message_notifications">
Nuevas notificaciones de mensajes</string>

    <string name="pref_title_ringtone">Tono de llamada</string>
    <string name="pref_ringtone_silent">Silencio</string>

    <string name="pref_title_vibrate">Vibrar</string>

    <string name="questionI">¿Quien propuso la prueba del camino básico ?</string>


    <string-array name="temas">
        <item>I. Pruebas Unitarias</item>
        <item>II. Pruebas de aceptacion de usuario</item>
        <item>III. Pruebas de Regresión</item>
        <item>IV. Pruebas Funcionales</item>
        <item>V. Pruebas de Integración</item>
        <item>VI. Pruebas de Calidad de Código</item>

    </string-array>
<string-array name="preguntaI">
    <item>¿Quien propuso la prueba del camino básico ?</item>
    <item>Tom McCabe</item>
    <item>Tom Robert</item>
    <item>Tom Charlie</item>
    <item>Tom McCabe</item>
</string-array>
    <string-array name="descripciones">
        <item> Al desarrollar un nuevo software o sistema de información, la primera etapa de pruebas a considerar
            es la etapa de pruebas unitarias o también llamada pruebas de caja blanca (White Box),
            estás pruebas también son llamadas pruebas modulares ya que nos permiten determinar si un modulo
            del programa esta listo y correctamente terminado.\nEsta basada en la lógica interna de la aplicacion
            y el código. Hace una cobertura de declaraciones " + "del código, ramas, caminos y condiciones.\n\n
            \n La prueba del camino básico es una técnica de prueba de caja blanca
            propuesta inicialmente por Tom McCabe. \nNotación del grafo de flujo.\nRepresentan el flujo de control
            lógico mediante notación de construcción estructurada.
            La complejidad ciclomática es una métrica de calidad software basada en el cálculo del número
            de caminos independientes que tiene nuestro código.\n La complejidad ciclomática V(G) se
            puede calcular de tres formas como se muestra en la imagen de arriva.</item>
        <item>Por sus siglas en ingles es llamada User Acceptance Testing (AUT), las pruebas de aceptación nos aseguran el
            comportamiento del sistema o software para poder asegurarnos que dicho sistema cumple con dichos objetivos.
            Cuando efectuamos la prueba de aceptación con los usuarios reales del sistema con UAT decimos que verificaremos
            el alcance pues consiste en la formalizacion de la aceptación de los entregables del proyecto que se han terminado.\n
            Investigando me encontré con algunos tips para las pruebas de aceptación del usuario\n\n
            Incluir las pruebas de usuario en los requisitos de la propuesta original, costo y cronograma. Podemos incluir los
            representantes de los clientes.\n
            Hacer un plan detallado de lo que la UAT está poniendo a prueba. Toda prueba debe estar basada sobre los requisitos
            acordados, y no sobre lo que el usuario quiere que el sistema haga.\n
            Tómate tiempo para hacer la selección de los usuarios que van a realizar las pruebas, con experiencia y de diferentes
            origenes.\n
            Crear un fallo basado en las instrucciones, reasignarlo al usuario que lo solicito y pedirle más detalles. Asegurate
            y prueba con otro usuario los mismos pasos de este error.\n
            Manten informes detallados de las pruebas, incluidos los procedimientos y los resultados.</item>
        <item>
 Llamamos prueba de regresión, porque tenemos que hacer nuevas pruebas donde se han probado antes. Por lo general,
            este tipo de pruebas se realiza a través de herramientas de automatización de pruebas, pues muchas veces hay falta
            de tiempo para ejecutar casos de prueba ya ejecutadas, así las pruebas de regresión se deja a un segundo plano.
            \n Sin embargo, este es un grave defecto que los equipos están poniendo. Las pruebas de regresión,
            a veces se puede encontrar más defectos que en la primera prueba, esto es debido al tester tener más familiaridad
            con el sistema y al vuelver a ejecutar los casos de prueba es posible detectar otros tipos de defectos donde en la
            primera ejecución fue inadvertido.</item>
        <item>\n Objetivo de la Prueba:\n\n
            Se asegura el trabajo apropiado de los requisitos funcionales, incluyendo la navegación, entrada de datos, procesamiento y obtención de resultados\n
                    \n
            Descripción de la Prueba:\n
            \n
            Las pruebas Funcionales deben enfocarse en los requisitos funcionales, las pruebas pueden estar basadas directamente en los Casos de Uso (o funciones de negocio), y las reglas del negocio. Las metas de estas pruebas son:\n" +
            \n
            Verificar la apropiada aceptación de datos,\n
            Verificar el procesamiento y recuperación y la implementación adecuada de las reglas del negocio.\n
            Este tipo de pruebas están basadas en técnicas de caja negra, que es, verificar la aplicación (y sus procesos internos) mediante la interacción con la aplicación vía GUI y analizar la salida (resultados). Lo que se identifica a continuación es un diseño preliminar de las pruebas recomendadas para cada aplicación.\n
            \n
            \n
            Técnica:\n
            \n
            Se ejecuta cada caso de uso, flujo de caso de uso, o función, usando datos válidos e inválidos, para verificar lo siguiente:\n" +
            \n
            Que los resultados esperados ocurran cuando se usen datos válidos.\n
            Que sean desplegados los mensajes apropiados de error y precaución cuando se usan datos inválidos.\n
            Que se aplique apropiadamente cada regla de negocio.\n
            Criterio de Completitud:\n
            \n
            Todas las pruebas planeadas han sido ejecutadas.\n
            Todos los defectos que se identificaron han sido tenidos en cuenta.\n
            \n
            Consideraciones Especiales:\n
            \n
            Identifique o describa aquellos aspectos (internos o externos) que impactan la implementación y
            ejecución de las pruebas de funcionalidad.</item>
        <item>Objetivo de la Prueba:\n
            Identificar errores introducidos por la combinación de programas probados unitariamente.
            Determina cómo la base de datos de prueba será cargada.
            Verificar que las interfaces entre las entidades externas (usuarios) y las aplicaciones funcionan correctamente. " +
            Verificar que las especificaciones de diseño sean alcanzadas.
            Determina el enfoque para avanzar desde un nivel de integración de las componentes al siguiente.
            \n
            Descripción de la Prueba:\n
            · Describe cómo verificar que las interfaces entre las componentes de software funcionan correctamente.\n
            · Determina cómo la base de datos de prueba será cargada.\n
            · Determina el enfoque para avanzar desde un nivel de integración de las componentes al siguiente.\n
            · Decide qué acciones tomar cuando se descubren problemas.\n
            Por cada Caso de Prueba ejecutado:\n
            Comparar el resultado esperado con el resultado obtenido.\n
            Técnica:\n
            \n
            Utilizar la técnica top-down. Se empieza con los módulos de nivel superior,
            y se verifica que los módulos de nivel superior llaman a los de nivel inferior
            de manera correcta, con los parámetros correctos.\n
            Utilizar la técnica down-top. Se empieza con los módulos de nivel inferior,
            y se verifica que los módulos de nivel inferior llaman a los de nivel superior
            de manera correcta, con los parámetros correctos.\n
            Criterio de Completitud:\n
            \n
            Todas las pruebas planeadas han sido ejecutadas.\n
            Todos los defectos que se identificaron han sido tenidos en cuenta.</item>
        <item>Este tipo de pruebas sirven para garantizar que la calidad del código es realmente óptima y que la probabilidad
            de tener errores o bugs en la codificación es mínima (nunca dejarán de existir los bugs pero al menos podemos hacer
            lo pertinente para disminuir la probabilidad).
            \n
            Existen varios tipos de análisis de calidad y para cada uno existen diferentes herramientas, por lo que a continuación
            explicaré generalmente qué tipo de análisis se pueden realizar y con qué herramienta.
            Cobertura:\n" +
            \n" +
            Este análisis nos indica el porcentaje que nuestro código desarrollado
            ha sido probado por las pruebas unitarias. La idea principal es que entre
            más código probado menor el riesgo de que aparezcan comportamientos indeseados.
            Cobertura es una herramienta muy usada para este tipo.\n</item>
    </string-array>


    <string-array name="type">
        <item>Nuevo Juego</item>
        <item>4 X 4</item>

    </string-array>
</resources>
